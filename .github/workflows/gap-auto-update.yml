name: gap-auto-update
on:
  schedule:
    - cron: '30 10 * * *'   # 每天 UTC 10:30 ≈ 北京时间 18:30
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          pip install -q yfinance pandas matplotlib numpy statsmodels akshare lxml

      - name: Ensure data dir
        run: mkdir -p data

      - name: Write updater (CI-only)
        shell: bash
        run: |
          cat > updater_ci.py << 'PY'
          #!/usr/bin/env python3
          import sys, warnings, time
          from datetime import datetime
          from pathlib import Path
          import numpy as np, pandas as pd, matplotlib.pyplot as plt
          warnings.filterwarnings("ignore", category=FutureWarning)
          plt.rcParams['axes.unicode_minus'] = False
          plt.rcParams['font.sans-serif'] = ['DejaVu Sans']
          plt.rcParams['svg.fonttype'] = 'path'; plt.rcParams['pdf.fonttype'] = 42

          def try_import(n):
              try: return __import__(n)
              except Exception: return None
          yf=try_import("yfinance"); ak=try_import("akshare")

          def to_monthly_last(s):
              if s is None or s.empty: return s
              g=s.groupby(s.index.to_period('M')).last()
              g.index=g.index.to_timestamp('M'); return g

          def extend_to_current_month_locf(df, cols=('policy','dr007')):
              if df is None or df.empty: return df, False
              cols_list=[*cols] if not isinstance(cols, list) else cols
              cols_list=[c for c in cols_list if c in df.columns]
              if not cols_list:
                  print("[note] extend_to_current_month_locf: no target columns found; skipped")
                  return df, False
              cur_end=pd.Timestamp(datetime.today()).to_period('M').to_timestamp('M')
              last_idx=df.index.max()
              if pd.isna(last_idx) or last_idx>=cur_end: return df, False
              dfx=df.copy()
              dfx.loc[cur_end, cols_list]=df[cols_list].iloc[-1].values
              dfx=dfx.sort_index()
              return dfx, True

          def fetch_policy_dr007_online(start='2014-01-01'):
              if ak is None: raise RuntimeError("AkShare not installed")
              dr=None
              for fn in ["macro_china_repo_rate","macro_china_dr_repo","repo_rate"]:
                  try:
                      f=getattr(ak, fn); tmp=f()
                      tmp.columns=[str(c).strip() for c in tmp.columns]
                      dcol=next((c for c in tmp.columns if '日期'in c or 'date'in str(c).lower() or '时间'in c),None)
                      if not dcol: continue
                      tmp[dcol]=pd.to_datetime(tmp[dcol],errors='coerce')
                      tmp=tmp.dropna(subset=[dcol]).set_index(dcol).sort_index()
                      cdr=next((c for c in tmp.columns if 'DR007' in str(c).upper()),None)
                      if not cdr: continue
                      dr=pd.to_numeric(tmp[cdr],errors='coerce').dropna(); break
                  except Exception: continue
              if dr is None: raise RuntimeError("AkShare: DR007 endpoint not found")
              dr_m=to_monthly_last(dr).rename('dr007')
              pol=None
              for fn,hint in [("macro_china_omo_daily","操作利率"),("macro_china_omo","中标利率"),("macro_china_mlf","利率")]:
                  try:
                      f=getattr(ak,fn); tmp=f()
                      tmp.columns=[str(c).strip() for c in tmp.columns]
                      dcol=next((c for c in tmp.columns if '日期'in c or 'date'in str(c).lower() or '时间'in c),None)
                      if not dcol: continue
                      tmp[dcol]=pd.to_datetime(tmp[dcol],errors='coerce')
                      tmp=tmp.dropna(subset=[dcol]).set_index(dcol).sort_index()
                      col=next((c for c in tmp.columns if hint in str(c)),None)
                      if col is None:
                          num=tmp.select_dtypes(include='number').columns
                          if len(num): col=num[-1]
                      pol=to_monthly_last(pd.to_numeric(tmp[col],errors='coerce')).rename('policy'); break
                  except Exception: continue
              if pol is None: raise RuntimeError("AkShare: policy rate endpoint not found")
              rng=pd.date_range(start=start,end=datetime.today(),freq='M')
              out=pd.DataFrame(index=rng).join(pol,how='left').join(dr_m,how='left')
              print("[info] policy/dr007 via AkShare"); return out

          def read_policy_dr007_csv(p,start='2014-01-01'):
              if not Path(p).exists(): raise FileNotFoundError(f"CSV not found: {p}")
              for enc in ['utf-8-sig','utf-8','gbk','gb2312']:
                  try: df=pd.read_csv(p,encoding=enc); break
                  except Exception: continue
              if df.shape[0]==0: raise ValueError("政策利率/DR007 CSV 为空")
              dcol=df.columns[0]; df[dcol]=pd.to_datetime(df[dcol],errors='coerce')
              df=df.dropna(subset=[dcol]).sort_values(by=dcol).set_index(dcol)
              if '政策利率' not in df.columns or 'DR007' not in df.columns:
                  raise ValueError("CSV 需要包含列：政策利率、DR007")
              pol=pd.to_numeric(df['政策利率'],errors='coerce').resample('D').ffill().groupby(lambda x:x.to_period('M')).last()
              dr =pd.to_numeric(df['DR007'],errors='coerce').resample('D').ffill().groupby(lambda x:x.to_period('M')).last()
              pol.index=pol.index.to_timestamp('M'); dr.index=dr.index.to_timestamp('M')
              rng=pd.date_range(start=start,end=datetime.today(),freq='M')
              out=pd.DataFrame(index=rng); out['policy']=pol; out['dr007']=dr
              print("[info] policy/dr007 via CSV"); return out

          def get_policy_dr007(start='2014-01-01', csv_path=Path("data/中国 DR007 政策利率.csv")):
              try: return fetch_policy_dr007_online(start=start)
              except Exception as e:
                  print(f"[warn] online policy/dr007 failed: {e}")
                  if Path(csv_path).exists(): return read_policy_dr007_csv(csv_path,start=start)
                  raise

          def fetch_index_monthly(start='2014-01-01'):
              def from_close(close):
                  mclose=to_monthly_last(close).dropna(); mret=mclose.pct_change()
                  level=(1+mret.fillna(0)).cumprod()*100.0
                  return pd.concat([mclose.rename('close_m'),mret.rename('ret_m'),level.rename('level_base100')],axis=1)
              if yf is not None:
                  try:
                      d=yf.download("399006.SZ",start=start,progress=False,auto_adjust=True,threads=False)
                      if d is not None and not d.empty and 'Close'in d: 
                          print("[info] index via yfinance (399006.SZ)"); return from_close(d['Close'])
                  except Exception as e: print(f"[warn] yfinance 399006.SZ failed: {e}")
              if ak is not None and hasattr(ak,"index_zh_a_hist"):
                  try:
                      tmp=ak.index_zh_a_hist(symbol="399006",period="daily",
                                             start_date=start.replace('-',''),
                                             end_date=datetime.today().strftime("%Y%m%d"))
                      dcol=next((c for c in tmp.columns if '日期'in c or 'date'in str(c).lower()),None)
                      ccol=next((c for c in tmp.columns if '收盘'in c or 'close'in str(c).lower()),None)
                      tmp[dcol]=pd.to_datetime(tmp[dcol],errors='coerce')
                      tmp=tmp.dropna(subset=[dcol]).set_index(dcol).sort_index()
                      close=pd.to_numeric(tmp[ccol],errors='coerce').dropna()
                      if not close.empty: 
                          print("[info] index via akshare index_zh_a_hist (399006)"); return from_close(close)
                  except Exception as e: print(f"[warn] akshare 399006 failed: {e}")
              if yf is not None:
                  try:
                      d=yf.download("159915.SZ",start=start,progress=False,auto_adjust=True,threads=False)
                      if d is not None and not d.empty and 'Close'in d: 
                          print("[info] index via yfinance (159915.SZ proxy)"); return from_close(d['Close'])
                  except Exception as e: print(f"[warn] yfinance 159915.SZ failed: {e}")
              if ak is not None and hasattr(ak,"fund_etf_hist_em"):
                  try:
                      tmp=ak.fund_etf_hist_em(symbol="159915",period="daily",
                                              start_date=start.replace('-',''),
                                              end_date=datetime.today().strftime("%Y%m%d"))
                      dcol=next((c for c in tmp.columns if '日期'in c or 'date'in str(c).lower()),None)
                      ccol=next((c for c in tmp.columns if '收盘'in c or 'close'in str(c).lower()),None)
                      tmp[dcol]=pd.to_datetime(tmp[dcol],errors='coerce')
                      tmp=tmp.dropna(subset=[dcol]).set_index(dcol).sort_index()
                      close=pd.to_numeric(tmp[ccol],errors='coerce').dropna()
                      if not close.empty: 
                          print("[info] index via akshare fund_etf_hist_em (159915 proxy)"); return from_close(close)
                  except Exception as e: print(f"[warn] akshare ETF 159915 failed: {e}")
              raise RuntimeError("指数获取失败：yfinance 与 AkShare 均不可用")

          def zscore(x):
              x=x.astype(float); s=x.std(ddof=1)
              return (x-x.mean())/s if s and not np.isnan(s) else x*0

          def fwd_cum_simple(r,k):
              rv=r.values; out=np.full_like(rv,np.nan,dtype=float)
              for i in range(len(rv)-k):
                  w=rv[i+1:i+1+k]; out[i]=np.nan if np.any(np.isnan(w)) else np.prod(1+w)-1.0
              return pd.Series(out,index=r.index)

          def make_core_charts(panel,out_dir):
              out_dir.mkdir(parents=True,exist_ok=True)
              fig=plt.figure(figsize=(12,5),dpi=150); ax=plt.gca()
              ax.plot(panel.index,zscore(panel['gap']),label='Gap Z',lw=2.0,color='#F59E0B')
              ax.plot(panel.index,zscore(panel['level_base100']),label='ChiNext Z',lw=2.0,color='#EF4444')
              ax.plot(panel.index,zscore(panel['gap'].rolling(3).mean()),label='Gap MA3 Z',lw=2.4,color='#1D4ED8')
              ax.set_title(f"Gap vs ChiNext (Z) + Gap MA3 | {panel.index.min():%Y-%m}–{panel.index.max():%Y-%m}")
              ax.set_ylabel('Z-score'); ax.set_xlabel('Date'); ax.grid(True,ls='--',lw=0.6,alpha=0.5); ax.legend()
              for ext in ['png','svg','pdf']: fig.savefig(out_dir/f'gap_vs_chinext_with_ma3.{ext}',bbox_inches='tight')
              plt.close(fig)
              roll=panel['gap'].rolling(12).corr(panel['ret_m'])
              fig2=plt.figure(figsize=(12,5),dpi=150); ax2=plt.gca()
              ax2.plot(roll.index,roll,label='Rolling corr (12m)',color='#F59E0B')
              ax2.axhline(0.0,ls='--',lw=1.0,color='#F59E0B',alpha=0.6,label='0 baseline')
              ax2.set_title('12m Rolling Correlation: Gap vs ChiNext monthly return')
              ax2.set_ylabel('Correlation (12m)'); ax2.set_xlabel('Date'); ax2.grid(True,ls='--',lw=0.6,alpha=0.5); ax2.legend()
              for ext in ['png','svg','pdf']: fig2.savefig(out_dir/f'rolling_corr_12m.{ext}',bbox_inches='tight')
              plt.close(fig2)

          def make_factor_panel(panel,out_dir):
              fig=plt.figure(figsize=(12,5),dpi=150); ax=plt.gca()
              if 'margin_ratio'in panel: ax.plot(panel.index,zscore(panel['margin_ratio']),label='Margin share (Z)',lw=2.0)
              if 'pe_percentile'in panel: ax.plot(panel.index,-zscore(panel['pe_percentile']),label='-Valuation pct (Z)',lw=2.0)
              if {'policy','dr007'}.issubset(panel.columns):
                  ax.plot(panel.index,zscore((panel['policy']-panel['dr007'])/panel['policy']),label='RelGap (Z)',lw=2.0)
              ax.set_title('Factor panel (standardized)'); ax.set_ylabel('Z-score'); ax.set_xlabel('Date')
              ax.grid(True,ls='--',lw=0.6,alpha=0.5); ax.legend()
              for ext in ['png','svg','pdf']: fig.savefig(out_dir/f'factor_panel_standardized.{ext}',bbox_inches='tight')
              plt.close(fig)

          def make_corr_table(panel,out_dir):
              rows=[]; fac=[c for c in ['gap','rel_gap','ratio','margin_ratio','pe_percentile'] if c in panel.columns]
              for f in fac:
                  for k in [0,3,6,12]:
                      if k==0: dfk=panel[[f,'ret_m']].dropna(); corr=dfk[f].corr(dfk['ret_m'])
                      else:
                          fwd=fwd_cum_simple(panel['ret_m'],k); dfk=pd.concat([panel[f],fwd],axis=1).dropna(); corr=dfk.iloc[:,0].corr(dfk.iloc[:,1])
                      rows.append({'factor':f,'k_months':k,'corr':float(corr)})
              pd.DataFrame(rows).pivot(index='factor',columns='k_months',values='corr').to_csv(out_dir/'factor_corr_table.csv',encoding='utf-8-sig')

          if __name__=='__main__':
              import argparse
              ap=argparse.ArgumentParser()
              ap.add_argument('--out',required=True)
              ap.add_argument('--csv',default="data/中国 DR007 政策利率.csv")
              ap.add_argument('--start',default='2014-01-01')
              a=ap.parse_args()

              out=Path(a.out); out.mkdir(parents=True,exist_ok=True)
              policy_dr=get_policy_dr007(start=a.start,csv_path=Path(a.csv))
              policy_dr,prov=extend_to_current_month_locf(policy_dr,cols=['policy','dr007'])
              if prov: print("[note] policy/dr007 for current month is provisional (LOCF from last month)")
              index_m=fetch_index_monthly(start=a.start)

              panel=policy_dr.join(index_m,how='inner')
              if panel.empty:
                  panel=policy_dr.join(index_m,how='outer').dropna(subset=['policy','dr007','ret_m','level_base100'])
              if panel.empty: raise ValueError("合并后为空：请检查数据日期交集")

              panel['gap']=panel['policy']-panel['dr007']
              panel['gap_ma3']=panel['gap'].rolling(3).mean()
              panel['rel_gap']=panel['gap']/panel['policy']
              panel['ratio']=panel['dr007']/panel['policy']

              panel.to_csv(out/'gap_chinext_monthly_panel.csv',encoding='utf-8-sig')
              make_core_charts(panel,out); make_factor_panel(panel,out); make_corr_table(panel,out)
              print(f"[done] Updated through {panel.index.max():%Y-%m}. Files saved to: {out}")
          PY
          chmod +x updater_ci.py

      - name: Run updater
        run: |
          python updater_ci.py --out out --csv "data/中国 DR007 政策利率.csv" --start 2014-01-01

      - name: Upload artifact (out)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: charts-and-data
          path: out

      - name: Commit charts
        run: |
          git config user.name github-actions
          git config user.email actions@github.com
          mkdir -p charts
          cp -r out/* charts/ || true
          git add charts/ || true
          git commit -m "daily charts ${{ github.run_id }}" || echo "no changes"
          git push || true

      - name: Capture date (CN)
        id: date
        run: echo "today=$(TZ=Asia/Shanghai date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      - name: Send email with charts (SendGrid)
        uses: dawidd6/action-send-mail@v3
        continue-on-error: true
        with:
          server: smtp.sendgrid.net
          port: 465
          secure: true
          username: ${{ secrets.SMTP_USERNAME }}   # apikey
          password: ${{ secrets.SMTP_PASSWORD }}   # SendGrid API Key
          subject: "Gap日报（MA3）| 更新至 ${{ steps.date.outputs.today }}"
          to: "hgwhgw275@gmail.com"
          from: "Gap Bot <no-reply@your-domain.example>"
          body: |
            <h3>Gap 日报（MA3）</h3>
            <p>见附件：</p>
            <ul>
              <li>gap_vs_chinext_with_ma3.png</li>
              <li>rolling_corr_12m.png</li>
            </ul>
          content_type: text/html
          attachments: |
            out/gap_vs_chinext_with_ma3.png,
            out/rolling_corr_12m.png
